// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "mysql"
    url      = env("DATABASE_URL")
}

// Example models for your dev.to clone
model User {
    id        Int      @id @default(autoincrement())
    email     String   @unique
    username  String   @unique
    password  String
    bio       String?
    image     String?
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    // Relations
    articles  Article[]
    comments  Comment[]
    likes     Like[]
    follows   Follow[]  @relation("UserFollows")
    followers Follow[]  @relation("UserFollowers")

    @@map("users")
}

model Article {
    id          Int      @id @default(autoincrement())
    title       String
    slug        String   @unique
    description String?
    body        String   @db.Text
    published   Boolean  @default(false)
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt

    // Relations
    authorId Int
    author   User      @relation(fields: [authorId], references: [id], onDelete: Cascade)
    tags     Tag[]
    comments Comment[]
    likes    Like[]

    @@map("articles")
}

model Tag {
    id       Int       @id @default(autoincrement())
    name     String    @unique
    articles Article[]

    @@map("tags")
}

model Comment {
    id        Int      @id @default(autoincrement())
    body      String   @db.Text
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    // Relations
    articleId Int
    article   Article @relation(fields: [articleId], references: [id], onDelete: Cascade)
    authorId  Int
    author    User    @relation(fields: [authorId], references: [id], onDelete: Cascade)

    @@map("comments")
}

model Like {
    id        Int      @id @default(autoincrement())
    createdAt DateTime @default(now())

    // Relations
    articleId Int
    article   Article @relation(fields: [articleId], references: [id], onDelete: Cascade)
    userId    Int
    user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([articleId, userId])
    @@map("likes")
}

model Follow {
    id        Int      @id @default(autoincrement())
    createdAt DateTime @default(now())

    // Relations
    followerId  Int
    follower    User @relation("UserFollowers", fields: [followerId], references: [id], onDelete: Cascade)
    followingId Int
    following   User @relation("UserFollows", fields: [followingId], references: [id], onDelete: Cascade)

    @@unique([followerId, followingId])
    @@map("follows")
}
